###概要###
pandasはnumpyを基盤に、
シリーズ(Series)とデータフレーム(FataFrame)というデータ型を提供している。

シリーズ(Series)とは1次元データで、
作成するにはpd.Series([10,20,30,40])とする。
ex)
ser = pd.Series([10,20,30,40])
print (ser)
→0    10
 1    20
 2    30
 3    40
 dtype: int64

データフレームは2次元データ
df = pd.DataFrame([[10, "ad", True],
                    [20, "ac", False],
                    [30, "aw", True],
                    [40, "as", False]])

print(df)
→   0   1      2
0  10  ad   True
1  20  ac  False
2  30  aw   True
3  40  as  False

##########

///DataFrameの先頭5行を出力
df.head()

///DataFrameの末尾5行を出力
df.tail()

///DataFrameのサイズを出力※関数ではない
df.shape
→(4, 3)

///DataFrameではインデックス名やカラム名を指定可能
ex)
インデックス名 : df.index = ["01","02","03"]
カラム名 : df.columns = ["数値","文字","真偽値"]

///カラムごとにまとまったデータでも作成可能


///カラム名を指定してデータ抽出可能※複数カラム指定可能

///データ抽出にはlocとilocを使用可能

///pd.read_csv()でcsvファイルを読み込み可能

///pd.read_excel()でEXCELファイルを読み込み可能

///webサイトのhtml内のtable要素を直接DataFrameに取り込み可能

///df.to_csv()でDataFrameのCSVを出力可能

///df.to_excel()でDataFrameのEXCELを出力可能

///DataFrameそのままでファイル出力する方法として、
///python標準ライブラリのpickleを使用可能

///quaryメソッドは条件を指定してデータ抽出可能

///applyメソッドはデータ１つずつに順次関数を適用する

///df.sort_value()で並び替え可能

///不要なカラムはdf.drop()で削除可能

///組み合わせデータの挿入
ex)
df.loc[:,"x/y"] = df.loc[:,"x"] / df.loc[:,"y"]

///df.groupby()でデータのサマライズを行う事が可能
ex)
df.groupby(pd.Grouper(freq='M')).mean()

///欠損値が存在する場合予期せぬ計算結果になる場合があるため処理をしておく必要がある。
//df.dropna()は欠損値を持つ行を削除する。
//df.fillna(x:int)は欠損値にxを代入する。

///pd.concat([df1,df2],axis=1)は2つのDataFrameを列方向に連結する。

///df.iloc[:,1].mode()で最頻値を出力
///df.iloc[:,1].mean()で平均値を出力
///df.iloc[:,1].median()で最頻値を出力
///df.iloc[:,1].std()で標準偏差

///df.describe()で統計量をまとめて出力可能
///df.corr()でカラム間のデータの関係を数値で出力可能

///DataFrameの値はdf.loc[:,:].valuesで出力可能